import csv
import os
import tkinter as tk
from tkinter import ttk, messagebox
from itertools import combinations
import numpy as np

# Database structure (partial example)
combined_data =  {'2018 Inferno Collection': {'Classified': {'Dual-Berettas-Twin-Turbo': [579.67, 333.38, 209.57, 333.38, 0, 0.0, 1.0, 1.0], 'SG-553-Integrale': [5944.03, 2170.57, 852.01, 2170.57, 0, 0.0, 1.0, 1.0]}, 'Industrial': {'Glock-18-High-Beam': [15.73, 16.27, 15.73, 16.27, 0, 0.0, 0.08, 0.08], 'MAC-10-Calf-Skin': [17.36, 8.92, 5.87, 8.92, 0, 0.0, 1.0, 1.0], 'PP-Bizon-Candy-Apple': [18.05, 9.82, 6.92, 9.82, 0, 0.0, 0.3, 0.3], 'R8-Revolver-Nitro': [29.75, 10.83, 5.92, 10.83, 0, 0.06, 0.8, 0.74]}, 'Mil-Spec': {'M4A4-Converter': [118.01, 62.15, 39.29, 62.15, 0, 0.0, 0.4, 0.4], 'Sawed-Off-Brake-Light': [75.73, 60.16, 75.73, 60.16, 0, 0.0, 0.08, 0.08], 'SSG-08-Hand-Brake': [88.5, 56.28, 35.81, 56.28, 0, 0.0, 1.0, 1.0], 'USP-S-Check-Engine': [134.33, 82.8, 49.93, 82.8, 0, 0.0, 0.6, 0.6]}, 'Restricted': {'AK-47-Safety-Net': [665.88, 472.1, 293.03, 472.1, 0, 0.0, 0.6, 0.6], 'MP7-Fade': [560.82, 367.46, 343.22, 367.46, 0, 0.0, 0.25, 0.25], 'P250-Vino-Primo': [624.48, 286.03, 145.54, 286.03, 0, 0.0, 1.0, 1.0]}}, '2018 Nuke Collection': {'Classified': {'M4A1-S-Control-Panel': [3442.01, 956.92, 590.06, 956.92, 0, 0.0, 1.0, 1.0], 'Tec-9-Remote-Control': [464.51, 261.51, 178.41, 261.51, 0, 0.0, 1.0, 1.0]}, 'Industrial': {'Galil-AR-Cold-Fusion': [33.43, 9.02, 6.04, 9.02, 0, 0.0, 0.83, 0.83], 'M4A4-Mainframe': [16.14, 9.77, 5.87, 9.77, 0, 0.0, 0.5, 0.5], 'MP7-Motherboard': [14.75, 8.67, 5.89, 8.67, 0, 0.0, 0.5, 0.5], 'Negev-Bulkhead': [15.72, 8.36, 5.99, 8.36, 0, 0.0, 0.5, 0.5]}, 'Mil-Spec': {'AWP-Acheron': [210.5, 120.46, 54.05, 120.46, 0, 0.0, 0.83, 0.83], 'MP5-SD-Co-Processor': [47.7, 32.06, 17.88, 32.06, 0, 0.0, 0.5, 0.5], 'P250-Exchanger': [50.17, 32.56, 17.87, 32.56, 0, 0.0, 0.5, 0.5], 'P90-Facility-Negative': [48.5, 31.89, 18.68, 31.89, 0, 0.0, 0.5, 0.5]}, 'Restricted': {'AUG-Random-Access': [345.81, 189.77, 97.76, 189.77, 0, 0.0, 0.5, 0.5], 'Glock-18-Nuclear-Garden': [443.83, 270.43, 156.28, 270.43, 0, 0.0, 0.7, 0.7], 'MAG-7-Core-Breach': [438.62, 234.8, 147.55, 234.8, 0, 0.0, 1.0, 1.0]}}, 'Anubis Collection': {'Classified': {'FAMAS-Waters-of-Nephthys': [10375.91, 6062.63, 10375.91, 6062.63, 0, 0.0, 0.7, 0.7], 'P250-Apeps-Curse': [9628.0, 5426.43, 2806.62, 5426.43, 0, 0.0, 1.0, 1.0]}, 'Industrial': {'M4A1-S-Mud-Spec': [113.96, 37.8, 21.19, 37.8, 0, 0.0, 0.73, 0.73], 'MAC-10-Echoing-Sands': [53.29, 29.09, 16.71, 29.09, 0, 0.02, 0.8, 0.78], 'SSG-08-Azure-Glyph': [63.8, 27.66, 16.14, 27.66, 0, 0.01, 0.99, 0.98], 'USP-S-Desert-Tactical': [79.39, 31.09, 18.17, 31.09, 0, 0.0, 1.0, 1.0]}, 'Mil-Spec': {'AK-47-Steel-Delta': [332.4, 223.24, 149.77, 223.24, 0, 0.0, 0.73, 0.73], 'AWP-Black-Nile': [638.06, 392.87, 253.73, 392.87, 0, 0.0, 0.75, 0.75], 'MAG-7-Copper-Coated': [236.59, 102.08, 59.69, 102.08, 0, 0.0, 1.0, 1.0], 'Tec-9-Mummys-Rot': [286.51, 104.19, 56.05, 104.19, 0, 0.0, 1.0, 1.0]}, 'Restricted': {'Glock-18-Rameses-Reach': [1745.65, 973.5, 618.61, 973.5, 0, 0.0, 1.0, 1.0], 'Nova-Sobeks-Bite': [1181.53, 666.48, 389.62, 666.48, 0, 0.0, 1.0, 1.0], 'P90-ScaraB-Rush': [1144.15, 725.21, 408.97, 725.21, 0, 0.0, 1.0, 1.0]}}, 'Bank Collection': {'Classified': {'P250-Franklin': [237.61, 134.33, 87.59, 134.33, 0, 0.0, 0.4, 0.4]}, 'Industrial': {'G3SG1-Green-Apple': [23.75, 14.1, 10.26, 14.1, 0, 0.0, 0.3, 0.3], 'Glock-18-Death-Rattle': [0, 15.38, 10.71, 15.38, 0, 0.08, 0.5, 0.42], 'MAC-10-Silver': [26.04, 28.08, 26.04, 28.08, 0, 0.0, 0.08, 0.08], 'Nova-Caged-Steel': [24.58, 14.75, 13.76, 14.75, 0, 0.0, 0.2, 0.2], 'UMP-45-Carbon-Fiber': [24.58, 16.27, 24.58, 16.27, 0, 0.0, 0.12, 0.12]}, 'Mil-Spec': {'CZ75-Auto-Tuxedo': [188.61, 97.58, 188.61, 97.58, 0, 0.0, 0.8, 0.8], 'Desert-Eagle-Meteorite': [167.15, 112.86, 95.23, 112.86, 0, 0.0, 0.18, 0.18], 'Galil-AR-Tuxedo': [182.91, 113.2, 60.22, 113.2, 0, 0.0, 0.8, 0.8]}, 'Restricted': {'AK-47-Emerald-Pinstripe': [1188.91, 550.1, 359.22, 550.1, 0, 0.0, 1.0, 1.0]}}, 'Chroma 2 Case': {'Classified': {'FAMAS-Djinn': [1337.46, 539.39, 273.42, 539.39, 0, 0.0, 1.0, 1.0], 'Five-SeveN-Monkey-Business': [0, 1544.62, 373.7, 1544.62, 0, 0.1, 0.9, 0.8], 'Galil-AR-Eco': [0, 5118.6, 757.55, 5118.6, 0, 0.1, 0.85, 0.75]}, 'Mil-Spec': {'AK-47-Elite-Build': [732.57, 732.57, 186.67, 732.57, 0, 0.0, 1.0, 1.0], 'Desert-Eagle-Bronze-Deco': [40.15, 25.55, 14.1, 25.55, 0, 0.0, 0.46, 0.46], 'MP7-Armor-Core': [39.06, 26.04, 15.04, 26.04, 0, 0.0, 0.5, 0.5], 'Negev-Man-o-war': [0, 20.51, 19.98, 20.51, 0, 0.1, 0.2, 0.1], 'P250-Valence': [77.68, 29.52, 14.53, 29.52, 0, 0.0, 0.8, 0.8], 'Sawed-Off-Origami': [38.46, 27.3, 17.83, 27.3, 0, 0.0, 0.55, 0.55]}, 'Restricted': {'AWP-Worm-God': [356.65, 245.58, 195.35, 245.58, 0, 0.0, 0.45, 0.45], 'CZ75-Auto-Pole-Position': [256.68, 128.05, 57.58, 128.05, 0, 0.0, 0.7, 0.7], 'MAG-7-Heat': [361.12, 118.93, 66.1, 118.93, 0, 0.0, 1.0, 1.0], 'UMP-45-Grand-Prix': [0, 0, 54.25, 0, 0, 0.25, 0.35, 0.1]}}, 'Chroma 3 Case': {'Classified': {'AUG-Fleet-Flock': [1174.03, 651.53, 273.39, 651.53, 0, 0.0, 1.0, 1.0], 'P250-Asiimov': [0, 1992.19, 347.21, 1992.19, 0, 0.1, 1.0, 0.9], 'UMP-45-Primal-Saber': [1227.45, 589.83, 265.12, 589.83, 0, 0.0, 0.77, 0.77]}, 'Mil-Spec': {'Dual-Berettas-Ventilators': [30.39, 16.68, 19.52, 16.68, 0, 0.0, 0.45, 0.45], 'G3SG1-Orange-Crash': [32.46, 16.27, 18.45, 16.27, 0, 0.0, 0.52, 0.52], 'M249-Spectre': [42.33, 16.27, 16.4, 16.27, 0, 0.0, 0.5, 0.5], 'MP9-Bioleak': [46.71, 33.28, 16.74, 33.28, 0, 0.0, 0.5, 0.5], 'P2000-Oceanic': [39.06, 20.04, 18.68, 20.04, 0, 0.0, 0.6, 0.6], 'Sawed-Off-Fubar': [0, 0, 0, 0, 0, 0.4, 1.0, 0.6], 'SG-553-Atlas': [36.86, 16.27, 34.58, 16.27, 0, 0.0, 0.81, 0.81]}, 'Restricted': {'CZ75-Auto-Red-Astor': [186.46, 92.27, 47.73, 92.27, 0, 0.0, 1.0, 1.0], 'Galil-AR-Firefight': [258.3, 93.33, 49.14, 93.33, 0, 0.0, 1.0, 1.0], 'SSG-08-Ghost-Crusader': [380.65, 150.32, 54.09, 150.32, 0, 0.0, 1.0, 1.0], 'Tec-9-Re-Entry': [188.52, 87.91, 44.43, 87.91, 0, 0.0, 0.43, 0.43], 'XM1014-Black-Tie': [259.38, 108.17, 45.51, 108.17, 0, 0.0, 0.75, 0.75]}}, 'Chroma Case': {'Classified': {'AK-47-Cartel': [3548.37, 2034.9, 1704.11, 2034.9, 0, 0.0, 0.75, 0.75], 'M4A4-%E9%BE%8D%E7%8E%8B-Dragon-King': [3507.92, 1699.55, 1065.74, 1699.55, 0, 0.0, 0.75, 0.75], 'P250-Muertos': [1050.78, 692.07, 1050.78, 1050.78, 0, 0.0, 0.6, 0.6]}, 'Mil-Spec': {'Glock-18-Catacombs': [88.98, 59.98, 40.1, 59.98, 0, 0.0, 0.5, 0.5], 'M249-System-Lock': [60.16, 38.35, 26.76, 38.35, 0, 0.0, 0.8, 0.8], 'MP9-Deadly-Poison': [255.22, 98.34, 65.47, 98.34, 0, 0.0, 1.0, 1.0], 'SCAR-20-Grotto': [55.63, 41.53, 28.21, 41.53, 0, 0.0, 0.5, 0.5], 'XM1014-Quicksilver': [53.13, 40.1, 30.71, 40.1, 0, 0.0, 0.5, 0.5]}, 'Restricted': {'Desert-Eagle-Naga': [677.63, 314.99, 170.39, 314.99, 0, 0.0, 1.0, 1.0], 'Dual-Berettas-Urban-Shock': [372.78, 228.16, 175.42, 228.16, 0, 0.0, 0.47, 0.47], 'MAC-10-Malachite': [378.76, 247.43, 201.73, 247.43, 0, 0.0, 0.5, 0.5], 'Sawed-Off-Serenity': [377.92, 238.22, 191.21, 238.22, 0, 0.0, 0.5, 0.5]}}, 'Clutch Case': {'Classified': {'AUG-Stymphalian': [847.89, 433.27, 216.43, 433.27, 0, 0.0, 0.63, 0.63], 'AWP-Mortis': [883.98, 399.32, 247.29, 399.32, 0, 0.0, 0.64, 0.64], 'USP-S-Cortex': [1223.65, 531.48, 321.17, 531.48, 0, 0.0, 1.0, 1.0]}, 'Mil-Spec': {'Five-SeveN-Flame-Test': [32.82, 16.65, 7.59, 16.65, 0, 0.0, 0.65, 0.65], 'MP9-Black-Sand': [34.7, 12.84, 9.75, 12.84, 0, 0.0, 1.0, 1.0], 'P2000-Urban-Hazard': [34.58, 12.99, 9.09, 12.99, 0, 0.0, 1.0, 1.0], 'PP-Bizon-Night-Riot': [33.67, 16.24, 8.86, 16.24, 0, 0.0, 0.8, 0.8], 'R8-Revolver-Grip': [34.58, 14.87, 8.86, 14.87, 0, 0.0, 1.0, 1.0], 'SG-553-Aloha': [29.95, 13.84, 9.34, 13.84, 0, 0.0, 0.55, 0.55], 'XM1014-Oxide-Blaze': [30.59, 14.2, 9.24, 14.2, 0, 0.0, 0.7, 0.7]}, 'Restricted': {'Glock-18-Moonrise': [213.33, 113.65, 62.25, 113.65, 0, 0.0, 0.65, 0.65], 'MAG-7-SWAG-7': [192.1, 84.99, 41.71, 84.99, 0, 0.0, 0.92, 0.92], 'Negev-Lionfish': [179.03, 85.97, 42.75, 85.97, 0, 0.0, 0.55, 0.55], 'Nova-Wild-Six': [173.26, 91.37, 39.47, 91.37, 0, 0.0, 0.8, 0.8], 'UMP-45-Arctic-Wolf': [165.77, 84.46, 41.74, 84.46, 0, 0.0, 0.8, 0.8]}}, 'CS20 Case': {'Classified': {'AUG-Death-by-Puppy': [1145.94, 699.7, 536.89, 699.7, 0, 0.0, 0.4, 0.4], 'MP9-Hydra': [2731.02, 989.75, 610.62, 989.75, 0, 0.0, 1.0, 1.0], 'P90-Nostalgia': [1224.72, 673.07, 541.44, 673.07, 0, 0.0, 0.57, 0.57]}, 'Mil-Spec': {'Dual-Berettas-Elite-16': [36.57, 30.45, 20.87, 30.45, 0, 0.0, 0.7, 0.7], 'FAMAS-Decommissioned': [72.13, 24.54, 22.92, 24.54, 0, 0.0, 1.0, 1.0], 'Glock-18-Sacrifice': [154.92, 31.12, 26.39, 31.12, 0, 0.0, 1.0, 1.0], 'MAC-10-Classic-Crate': [47.91, 19.78, 26.56, 19.78, 0, 0.0, 1.0, 1.0], 'MAG-7-Popdog': [37.6, 19.2, 30.63, 19.2, 0, 0.0, 0.8, 0.8], 'SCAR-20-Assault': [32.48, 19.75, 25.69, 19.75, 0, 0.0, 0.62, 0.62], 'Tec-9-Flash-Out': [38.54, 23.72, 23.55, 23.72, 0, 0.0, 0.7, 0.7]}, 'Restricted': {'Five-SeveN-Buddy': [193.45, 123.53, 79.05, 123.53, 0, 0.0, 0.55, 0.55], 'M249-Aztec': [187.96, 124.52, 62.62, 124.52, 0, 0.0, 0.75, 0.75], 'MP5-SD-Agent': [291.53, 129.78, 77.01, 129.78, 0, 0.0, 1.0, 1.0], 'P250-Inferno': [187.76, 113.7, 67.2, 113.7, 0, 0.0, 0.68, 0.68], 'UMP-45-Plastique': [207.92, 116.42, 60.64, 116.42, 0, 0.0, 0.8, 0.8]}}, 'Danger Zone Case': {'Classified': {'Desert-Eagle-Mecha-Industries': [1125.1, 698.81, 529.11, 698.81, 0, 0.0, 0.6, 0.6], 'MP5-SD-Phosphor': [1016.96, 677.88, 490.53, 677.88, 0, 0.0, 0.8, 0.8], 'UMP-45-Momentum': [999.09, 678.97, 453.72, 678.97, 0, 0.0, 0.5, 0.5]}, 'Mil-Spec': {'Glock-18-Oxide-Blaze': [59.94, 18.44, 11.7, 18.44, 0, 0.0, 0.85, 0.85], 'M4A4-Magnesium': [291.29, 86.97, 40.84, 86.97, 0, 0.0, 1.0, 1.0], 'MP9-Modest-Threat': [34.17, 15.38, 10.32, 15.38, 0, 0.0, 0.75, 0.75], 'Nova-Wood-Fired': [32.82, 15.41, 10.69, 15.41, 0, 0.0, 0.75, 0.75], 'Sawed-Off-Black-Sand': [44.46, 16.06, 8.89, 16.06, 0, 0.0, 0.9, 0.9], 'SG-553-Danger-Close': [37.89, 16.12, 10.32, 16.12, 0, 0.02, 0.8, 0.78], 'Tec-9-Fubar': [0, 102.75, 9.74, 102.75, 0, 0.14, 1.0, 0.86]}, 'Restricted': {'G3SG1-Scavenger': [177.59, 87.98, 57.39, 87.98, 0, 0.0, 0.65, 0.65], 'Galil-AR-Signal': [172.93, 101.14, 66.05, 101.14, 0, 0.0, 0.5, 0.5], 'MAC-10-Pipe-Down': [250.58, 95.29, 57.32, 95.29, 0, 0.0, 0.9, 0.9], 'P250-Nevermore': [170.96, 102.87, 75.75, 102.87, 0, 0.0, 0.4, 0.4], 'USP-S-Flashback': [158.17, 99.85, 73.23, 99.85, 0, 0.0, 0.5, 0.5]}}, 'Dreams & Nightmares Case': {'Classified': {'Dual-Berettas-Melondrama': [942.21, 432.83, 212.56, 432.83, 0, 0.0, 1.0, 1.0], 'FAMAS-Rapid-Eye-Movement': [853.83, 415.81, 177.87, 415.81, 0, 0.0, 1.0, 1.0], 'MP7-Abyssal-Apparition': [942.1, 442.89, 198.16, 442.89, 0, 0.0, 1.0, 1.0]}, 'Mil-Spec': {'Five-SeveN-Scrawl': [37.05, 14.22, 6.56, 14.22, 0, 0.0, 1.0, 1.0], 'MAC-10-Ensnared': [36.14, 15.15, 6.74, 15.15, 0, 0.0, 0.9, 0.9], 'MAG-7-Foresight': [29.24, 12.61, 6.32, 12.61, 0, 0.0, 0.7, 0.7], 'MP5-SD-Necro-Jr': [35.22, 11.87, 6.33, 11.87, 0, 0.0, 1.0, 1.0], 'P2000-Lifted-Spirits': [32.93, 11.9, 7.22, 11.9, 0, 0.0, 1.0, 1.0], 'Sawed-Off-Spirit-Board': [69.17, 11.99, 6.74, 11.99, 0, 0.0, 1.0, 1.0], 'SCAR-20-Poultrygeist': [32.43, 13.13, 5.92, 13.13, 0, 0.0, 0.57, 0.57]}, 'Restricted': {'G3SG1-Dream-Glade': [163.5, 84.99, 40.5, 84.99, 0, 0.0, 1.0, 1.0], 'M4A1-S-Night-Terror': [181.9, 91.16, 50.07, 91.16, 0, 0.0, 0.7, 0.7], 'PP-Bizon-Space-Cat': [164.5, 87.29, 40.52, 87.29, 0, 0.0, 0.67, 0.67], 'USP-S-Ticket-to-Hell': [197.64, 98.53, 45.47, 98.53, 0, 0.0, 0.76, 0.76], 'XM1014-Zombie-Offensive': [155.87, 72.33, 37.89, 72.33, 0, 0.0, 0.5, 0.5]}}, 'Dust 2 Collection': {'Classified': {'R8-Revolver-Amber-Fade': [85.53, 75.46, 76.88, 75.46, 0, 0.0, 0.4, 0.4]}, 'Industrial': {'AK-47-Safari-Mesh': [209.89, 19.38, 7.87, 19.38, 0, 0.06, 0.8, 0.74], 'Five-SeveN-Orange-Peel': [29.24, 10.18, 6.32, 10.18, 0, 0.06, 0.8, 0.74], 'MAC-10-Palm': [31.97, 9.89, 6.22, 9.89, 0, 0.06, 0.8, 0.74], 'Sawed-Off-Snake-Camo': [31.34, 10.92, 6.34, 10.92, 0, 0.06, 0.8, 0.74], 'Tec-9-VariCamo': [22.22, 10.47, 6.58, 10.47, 0, 0.0, 0.6, 0.6]}, 'Mil-Spec': {'M4A1-S-VariCamo': [165.73, 98.83, 61.26, 98.83, 0, 0.0, 0.6, 0.6], 'PP-Bizon-Brass': [199.61, 98.32, 60.28, 98.32, 0, 0.0, 1.0, 1.0], 'SG-553-Damascus-Steel': [161.35, 99.99, 161.35, 99.99, 0, 0.0, 1.0, 1.0]}, 'Restricted': {'P2000-Amber-Fade': [773.17, 469.4, 327.1, 469.4, 0, 0.0, 0.4, 0.4]}}, 'Falchion Case': {'Classified': {'CZ75-Auto-Yellow-Jacket': [1581.17, 864.48, 514.12, 864.48, 0, 0.0, 1.0, 1.0], 'MP7-Nemesis': [1355.76, 857.63, 604.06, 857.63, 0, 0.0, 0.32, 0.32], 'SG-553-Cyrex': [1630.58, 854.17, 516.62, 854.17, 0, 0.0, 1.0, 1.0]}, 'Mil-Spec': {'Galil-AR-Rocket-Pop': [828.81, 280.46, 128.5, 280.46, 0, 0.0, 1.0, 1.0], 'Glock-18-Bunsen-Burner': [187.34, 68.19, 66.05, 68.19, 0, 0.0, 0.8, 0.8], 'Nova-Ranger': [68.46, 48.72, 69.17, 48.72, 0, 0.0, 1.0, 1.0], 'P90-Elite-Build': [105.73, 54.14, 77.97, 54.14, 0, 0.0, 1.0, 1.0], 'UMP-45-Riot': [57.39, 48.72, 57.32, 48.72, 0, 0.0, 0.7, 0.7], 'USP-S-Torque': [207.92, 170.01, 88.38, 170.01, 0, 0.0, 0.46, 0.46]}, 'Restricted': {'FAMAS-Neural-Net': [228.28, 129.78, 76.88, 129.78, 0, 0.0, 0.6, 0.6], 'M4A4-Evil-Daimyo': [507.63, 296.47, 227.4, 296.47, 0, 0.0, 0.52, 0.52], 'MP9-Ruby-Poison-Dart': [314.03, 175.42, 153.77, 175.42, 0, 0.0, 0.5, 0.5], 'Negev-Loudmouth': [0, 656.21, 69.28, 656.21, 0, 0.14, 0.65, 0.51], 'P2000-Handgun': [447.66, 165.67, 74.61, 165.67, 0, 0.0, 1.0, 1.0]}}, 'Fracture Case': {'Classified': {'Glock-18-Vogue': [1749.2, 649.17, 317.31, 649.17, 0, 0.0, 0.75, 0.75], 'M4A4-Tooth-Fairy': [934.86, 543.3, 311.28, 543.3, 0, 0.0, 0.73, 0.73], 'XM1014-Entombed': [948.69, 522.85, 316.22, 522.85, 0, 0.0, 0.5, 0.5]}, 'Mil-Spec': {'Negev-Ultralight': [31.82, 12.61, 6.06, 12.61, 0, 0.0, 0.79, 0.79], 'P2000-Gnarled': [33.58, 12.02, 6.35, 12.02, 0, 0.0, 1.0, 1.0], 'P250-Cassette': [29.93, 11.9, 6.98, 11.9, 0, 0.0, 0.6, 0.6], 'P90-Freight': [33.58, 11.9, 6.06, 11.9, 0, 0.0, 1.0, 1.0], 'PP-Bizon-Runic': [31.07, 12.02, 6.02, 12.02, 0, 0.0, 1.0, 1.0], 'SG-553-Ol-Rusty': [34.58, 12.61, 6.14, 12.61, 0, 0.0, 0.7, 0.7], 'SSG-08-Mainframe-001': [29.63, 11.99, 6.26, 11.99, 0, 0.0, 1.0, 1.0]}, 'Restricted': {'Galil-AR-Connexion': [165.67, 87.25, 44.67, 87.25, 0, 0.0, 0.8, 0.8], 'MAC-10-Allure': [172.96, 86.97, 172.96, 86.97, 0, 0.0, 1.0, 1.0], 'MAG-7-Monster-Call': [194.92, 94.21, 46.69, 94.21, 0, 0.0, 1.0, 1.0], 'MP5-SD-Kitbash': [162.07, 88.35, 42.8, 88.35, 0, 0.0, 0.8, 0.8], 'Tec-9-Brother': [175.42, 87.69, 42.92, 87.69, 0, 0.0, 1.0, 1.0]}}, 'Gallery Case': {'Classified': {'AK-47-The-Outsiders': [5586.18, 1959.66, 1021.12, 1959.66, 0, 0.0, 0.9, 0.9], 'P250-Epicenter': [1449.61, 946.72, 601.83, 946.72, 0, 0.0, 0.8, 0.8], 'UMP-45-Neo-Noir': [1633.54, 922.6, 645.31, 922.6, 0, 0.0, 1.0, 1.0]}, 'Mil-Spec': {'AUG-Luxe-Trim': [68.46, 24.96, 9.89, 24.96, 0, 0.0, 0.9, 0.9], 'Desert-Eagle-Calligraffiti': [96.38, 25.84, 12.84, 25.84, 0, 0.0, 1.0, 1.0], 'M249-Hypnosis': [62.3, 24.55, 10.42, 24.55, 0, 0.0, 1.0, 1.0], 'MP5-SD-Statics': [54.74, 24.64, 9.91, 24.64, 0, 0.0, 1.0, 1.0], 'R8-Revolver-Tango': [71.61, 27.07, 12.84, 27.07, 0, 0.0, 0.85, 0.85], 'SCAR-20-Trail-Blazer': [51.65, 26.68, 10.55, 26.68, 0, 0.0, 0.7, 0.7], 'USP-S-027': [66.16, 25.33, 9.04, 0, 0, 0.0, 1.0, 1.0]}, 'Restricted': {'Dual-Berettas-Hydro-Strike': [331.35, 192.69, 88.93, 192.69, 0, 0.0, 0.8, 0.8], 'M4A4-Turbine': [530.55, 216.43, 85.53, 216.43, 0, 0.0, 0.85, 0.85], 'MAC-10-Saib%C4%81-Oni': [321.61, 212.23, 99.63, 212.23, 0, 0.0, 0.66, 0.66], 'P90-Randy-Rush': [298.4, 186.25, 85.35, 186.25, 0, 0.0, 0.75, 0.75], 'SSG-08-Rapid-Transit': [370.71, 209.44, 83.38, 209.44, 0, 0.0, 0.75, 0.75]}}, 'Gamma 2 Case': {'Classified': {'AUG-Syd-Mead': [1056.89, 466.47, 216.57, 466.47, 0, 0.0, 0.8, 0.8], 'MP9-Airlock': [1217.16, 659.47, 282.62, 659.47, 0, 0.0, 1.0, 1.0], 'Tec-9-Fuel-Injector': [2102.94, 859.76, 536.02, 859.76, 0, 0.0, 1.0, 1.0]}, 'Mil-Spec': {'CZ75-Auto-Imprint': [64.23, 17.32, 13.92, 17.32, 0, 0.0, 1.0, 1.0], 'Five-SeveN-Scumbria': [65.66, 15.94, 65.66, 15.94, 0, 0.0, 1.0, 1.0], 'G3SG1-Ventilator': [30.36, 13.77, 13.84, 13.77, 0, 0.0, 0.45, 0.45], 'Negev-Dazzle': [0, 70.17, 15.8, 70.17, 0, 0.1, 0.65, 0.55], 'P90-Grim': [59.92, 18.77, 12.53, 18.77, 0, 0.0, 0.8, 0.8], 'UMP-45-Briefing': [42.23, 13.84, 15.27, 13.84, 0, 0.0, 1.0, 1.0], 'XM1014-Slipstream': [41.14, 21.74, 16.8, 21.74, 0, 0.0, 0.5, 0.5]}, 'Restricted': {'Desert-Eagle-Directive': [1108.79, 167.99, 48.72, 167.99, 0, 0.06, 1.0, 0.94], 'Glock-18-Weasel': [296.98, 93.88, 47.98, 93.88, 0, 0.0, 1.0, 1.0], 'MAG-7-Petroglyph': [195.51, 87.95, 48.62, 87.95, 0, 0.0, 0.44, 0.44], 'SCAR-20-Powercore': [202.58, 96.38, 44.4, 96.38, 0, 0.0, 1.0, 1.0], 'SG-553-Triarch': [192.76, 85.53, 41.14, 85.53, 0, 0.0, 1.0, 1.0]}}, 'Gamma Case': {'Classified': {'M4A4-Desolate-Space': [2923.19, 1288.54, 852.8, 1288.54, 0, 0.0, 1.0, 1.0], 'P2000-Imperial-Dragon': [1018.27, 568.23, 338.51, 568.23, 0, 0.0, 0.63, 0.63], 'SCAR-20-Bloodsport': [938.77, 501.18, 354.85, 501.18, 0, 0.0, 0.45, 0.45]}, 'Mil-Spec': {'Five-SeveN-Violent-Daimyo': [101.8, 50.84, 33.58, 50.84, 0, 0.0, 0.7, 0.7], 'MAC-10-Carnivore': [80.36, 22.61, 28.8, 22.61, 0, 0.0, 1.0, 1.0], 'Nova-Exo': [36.82, 26.69, 36.82, 26.69, 0, 0.0, 0.5, 0.5], 'P250-Iron-Clad': [107.71, 27.52, 28.89, 27.52, 0, 0.05, 0.8, 0.75], 'PP-Bizon-Harvester': [53.5, 24.55, 41.93, 24.55, 0, 0.0, 1.0, 1.0], 'SG-553-Aerial': [33.6, 20.89, 23.82, 20.89, 0, 0.0, 0.6, 0.6], 'Tec-9-Ice-Cap': [84.01, 46.43, 24.04, 46.43, 0, 0.0, 0.5, 0.5]}, 'Restricted': {'AUG-Aristocrat': [229.6, 123.44, 69.3, 123.44, 0, 0.0, 0.66, 0.66], 'AWP-Phobos': [296.44, 191.66, 149.23, 191.66, 0, 0.0, 0.4, 0.4], 'P90-Chopper': [212.13, 127.48, 67.13, 127.48, 0, 0.0, 0.6, 0.6], 'R8-Revolver-Reboot': [336.61, 137.2, 95.29, 137.2, 0, 0.0, 1.0, 1.0], 'Sawed-Off-Limelight': [260.67, 108.7, 62.81, 108.7, 0, 0.0, 1.0, 1.0]}}, 'Glove Case': {'Classified': {'FAMAS-Mecha-Industries': [1037.39, 649.71, 463.48, 649.71, 0, 0.0, 0.5, 0.5], 'P90-Shallow-Grave': [891.02, 621.8, 221.09, 621.8, 0, 0.0, 0.75, 0.75], 'Sawed-Off-Wasteland-Princess': [937.83, 439.77, 216.57, 439.77, 0, 0.0, 0.7, 0.7]}, 'Mil-Spec': {'CZ75-Auto-Polymer': [33.58, 19.18, 20.87, 19.18, 0, 0.0, 0.5, 0.5], 'Galil-AR-Black-Sand': [82.31, 19.32, 17.96, 19.32, 0, 0.0, 1.0, 1.0], 'Glock-18-Ironwork': [199.21, 36.65, 19.48, 36.65, 0, 0.0, 1.0, 1.0], 'MAG-7-Sonar': [33.29, 18.7, 16.16, 18.7, 0, 0.0, 0.45, 0.45], 'MP7-Cirrus': [69.17, 25.42, 19.7, 25.42, 0, 0.0, 0.75, 0.75], 'MP9-Sand-Scale': [32.12, 18.37, 17.57, 18.37, 0, 0.0, 0.45, 0.45], 'P2000-Turf': [100.8, 31.63, 19.48, 31.63, 0, 0.0, 1.0, 1.0]}, 'Restricted': {'Dual-Berettas-Royal-Consorts': [370.84, 118.58, 52.21, 118.58, 0, 0.0, 1.0, 1.0], 'G3SG1-Stinger': [179.86, 102.89, 179.86, 179.86, 0, 0.0, 0.7, 0.7], 'M4A1-S-Flashback': [275.71, 112.16, 54.41, 112.16, 0, 0.0, 1.0, 1.0], 'Nova-Gila': [165.77, 85.86, 58.31, 85.86, 0, 0.0, 0.3, 0.3], 'USP-S-Cyrex': [368.2, 219.62, 115.14, 219.62, 0, 0.0, 0.55, 0.55]}}, 'Graphic Design Collection': {'Classified': {'AUG-Lil-Pig': [6641.28, 4400.98, 2196.3, 4400.98, 0, 0.0, 0.8, 0.8], 'Desert-Eagle-Starcade': [13115.98, 7882.25, 4926.72, 7882.25, 0, 0.0, 0.75, 0.75]}, 'Industrial': {'FAMAS-Halftone-Wash': [17.97, 12.48, 11.11, 12.48, 0, 0.0, 0.5, 0.5], 'Galil-AR-NV': [19.74, 13.03, 11.11, 13.03, 0, 0.0, 0.47, 0.47], 'M249-Spectrogram': [17.56, 11.92, 10.84, 11.92, 0, 0.0, 0.5, 0.5], 'MP7-Astrolabe': [21.94, 11.32, 10.7, 11.32, 0, 0.0, 1.0, 1.0], 'P2000-Coral-Halftone': [18.11, 12.48, 10.97, 12.48, 0, 0.0, 0.52, 0.52], 'SSG-08-Halftone-Whorl': [17.56, 12.21, 11.11, 12.21, 0, 0.0, 0.5, 0.5]}, 'Mil-Spec': {'AK-47-Crossfade': [323.16, 241.19, 161.88, 241.19, 0, 0.0, 0.5, 0.5], 'SCAR-20-Wild-Berry': [129.8, 91.9, 50.28, 91.9, 0, 0.0, 0.65, 0.65], 'SG-553-Berry-Gel-Coat': [140.78, 86.27, 48.99, 86.27, 0, 0.0, 0.8, 0.8], 'XM1014-Halftone-Shift': [133.41, 86.97, 49.93, 86.97, 0, 0.0, 0.6, 0.6]}, 'Restricted': {'CZ75-Auto-Slalom': [983.45, 678.99, 465.36, 678.99, 0, 0.0, 0.57, 0.57], 'M4A4-Polysoup': [1290.88, 763.64, 455.76, 763.64, 0, 0.0, 0.64, 0.64], 'P90-Attack-Vector': [1031.71, 658.87, 414.74, 658.87, 0, 0.0, 0.55, 0.55]}}, 'Horizon Case': {'Classified': {'FAMAS-Eye-of-Athena': [1471.62, 879.3, 473.22, 879.3, 0, 0.0, 0.7, 0.7], 'M4A1-S-Nightmare': [4664.68, 2169.05, 1151.05, 2169.05, 0, 0.0, 1.0, 1.0], 'Sawed-Off-Devourer': [1566.91, 840.99, 499.21, 840.99, 0, 0.0, 0.8, 0.8]}, 'Mil-Spec': {'AUG-Amber-Slipstream': [47.89, 29.63, 26.51, 29.63, 0, 0.0, 0.55, 0.55], 'Dual-Berettas-Shred': [48.48, 32.48, 31.32, 32.48, 0, 0.0, 0.5, 0.5], 'Glock-18-Warhawk': [143.37, 36.46, 33.95, 36.46, 0, 0.0, 1.0, 1.0], 'MP9-Capillary': [92.88, 57.39, 31.4, 57.39, 0, 0.0, 0.7, 0.7], 'P90-Traction': [131.82, 38.12, 29.1, 38.12, 0, 0.0, 1.0, 1.0], 'R8-Revolver-Survivalist': [48.09, 33.51, 30.31, 33.51, 0, 0.0, 0.7, 0.7], 'Tec-9-Snek-9': [151.72, 34.34, 30.67, 34.34, 0, 0.0, 1.0, 1.0]}, 'Restricted': {'AWP-PAW': [503.08, 296.47, 167.64, 296.47, 0, 0.0, 0.5, 0.5], 'CZ75-Auto-Eco': [359.83, 178.63, 78.03, 178.63, 0, 0.0, 1.0, 1.0], 'G3SG1-High-Seas': [387.85, 153.77, 83.19, 153.77, 0, 0.0, 0.7, 0.7], 'MP7-Powercore': [371.56, 171.08, 80.13, 171.08, 0, 0.0, 0.8, 0.8], 'Nova-Toy-Soldier': [355.13, 168.33, 100.42, 168.33, 0, 0.0, 1.0, 1.0]}}, 'Italy Collection': {'Industrial': {'Dual-Berettas-Stained': [33.07, 11.39, 7.59, 11.39, 0, 0.0, 1.0, 1.0], 'M4A1-S-Boreal-Forest': [377.35, 377.35, 7.87, 377.35, 0, 0.06, 0.8, 0.74], 'Nova-Candy-Apple': [20.58, 10.84, 10.75, 10.84, 0, 0.0, 0.3, 0.3], 'P2000-Granite-Marbleized': [105.82, 10.97, 7.56, 10.97, 0, 0.06, 0.8, 0.74], 'UMP-45-Gunsmoke': [75.86, 10.53, 7.6, 10.53, 0, 0.06, 0.8, 0.74], 'XM1014-CaliCamo': [19.48, 10.2, 7.55, 10.2, 0, 0.0, 0.6, 0.6]}, 'Mil-Spec': {'Glock-18-Candy-Apple': [131.88, 75.8, 65.05, 75.8, 0, 0.0, 0.3, 0.3], 'MP7-Anodized-Navy': [114.0, 104.0, 0, 0, 0, 0.0, 0.08, 0.08], 'Sawed-Off-Full-Stop': [104.38, 66.21, 40.65, 66.21, 0, 0.0, 0.6, 0.6]}, 'Restricted': {'AWP-Pit-Viper': [0, 82.02, 37.55, 82.02, 0, 0.08, 0.5, 0.42]}}, 'Kilowatt Case': {'Classified': {'M4A1-S-Black-Lotus': [2360.8, 1378.59, 1037.64, 1378.59, 0, 0.0, 0.7, 0.7], 'USP-S-Jawbreaker': [2267.53, 1270.87, 833.91, 1270.87, 0, 0.0, 1.0, 1.0], 'Zeus-x27-Olympus': [1851.93, 1195.49, 845.56, 1195.49, 0, 0.0, 0.67, 0.67]}, 'Mil-Spec': {'Dual-Berettas-Hideout': [31.68, 18.93, 10.28, 18.93, 0, 0.0, 0.7, 0.7], 'MAC-10-Light-Box': [63.65, 19.48, 10.15, 19.48, 0, 0.0, 1.0, 1.0], 'Nova-Dark-Sigil': [31.41, 18.69, 10.13, 18.69, 0, 0.0, 0.7, 0.7], 'SSG-08-Dezastre': [35.25, 19.06, 10.53, 19.06, 0, 0.0, 1.0, 1.0], 'Tec-9-Slag': [35.26, 18.77, 10.09, 18.77, 0, 0.0, 0.9, 0.9], 'UMP-45-Motorized': [34.66, 18.44, 10.13, 18.44, 0, 0.0, 0.8, 0.8], 'XM1014-Irezumi': [33.4, 19.06, 10.09, 19.06, 0, 0.0, 0.8, 0.8]}, 'Restricted': {'Five-SeveN-Hybrid': [268.55, 159.01, 101.01, 159.01, 0, 0.0, 1.0, 1.0], 'Glock-18-Block-18': [270.72, 160.26, 98.82, 160.26, 0, 0.0, 0.67, 0.67], 'M4A4-Etch-Lord': [297.78, 159.59, 98.15, 159.59, 0, 0.0, 1.0, 1.0], 'MP7-Just-Smile': [286.47, 161.48, 98.63, 161.48, 0, 0.0, 1.0, 1.0], 'Sawed-Off-Analog-Input': [253.58, 159.55, 99.85, 159.55, 0, 0.0, 0.62, 0.62]}}, 'Lake Collection': {'Industrial': {'AWP-Safari-Mesh': [267.8, 15.02, 6.79, 15.02, 0, 0.06, 0.8, 0.74], 'Desert-Eagle-Mudder': [88.13, 10.31, 6.34, 10.31, 0, 0.06, 0.8, 0.74], 'FAMAS-Cyanospatter': [92.42, 10.09, 6.3, 10.09, 0, 0.06, 0.8, 0.74], 'PP-Bizon-Night-Ops': [19.95, 9.89, 6.33, 9.89, 0, 0.0, 0.6, 0.6], 'XM1014-Blue-Steel': [36.95, 10.2, 6.24, 10.2, 0, 0.0, 1.0, 1.0]}, 'Mil-Spec': {'P90-Teardown': [105.62, 64.54, 40.64, 64.54, 0, 0.0, 0.6, 0.6], 'SG-553-Anodized-Navy': [110.35, 96.85, 110.35, 96.85, 0, 0.0, 0.08, 0.08], 'USP-S-Night-Ops': [114.8, 65.5, 41.14, 65.5, 0, 0.0, 0.6, 0.6]}, 'Restricted': {'Dual-Berettas-Cobalt-Quartz': [41.51, 20.58, 14.2, 20.58, 0, 0.0, 0.4, 0.4]}}, 'Limited Edition Item Collection': {'Classified': {'Desert-Eagle-Heat-Treated': [2412.63, 331.83, 171.08, 331.83, 0, 0.0, 1.0, 1.0]}}, 'Operation Breakout Weapon Case': {'Classified': {'Desert-Eagle-Conspiracy': [1006.02, 835.05, 697.18, 835.05, 0, 0.0, 0.3, 0.3], 'Five-SeveN-Fowl-Play': [1079.63, 649.71, 247.59, 649.71, 0, 0.0, 1.0, 1.0], 'Glock-18-Water-Elemental': [1495.46, 917.07, 550.3, 917.07, 0, 0.0, 0.7, 0.7]}, 'Mil-Spec': {'MP7-Urban-Hazard': [35.72, 19.75, 12.99, 19.75, 0, 0.0, 0.5, 0.5], 'Negev-Desert-Strike': [33.07, 18.98, 11.86, 18.98, 0, 0.0, 0.5, 0.5], 'P2000-Ivory': [88.7, 22.97, 13.59, 22.97, 0, 0.0, 1.0, 1.0], 'SSG-08-Abyss': [330.28, 71.61, 31.62, 71.61, 0, 0.0, 1.0, 1.0], 'UMP-45-Labyrinth': [37.89, 20.08, 12.85, 20.08, 0, 0.0, 0.4, 0.4]}, 'Restricted': {'CZ75-Auto-Tigris': [196.23, 99.59, 74.11, 99.59, 0, 0.0, 1.0, 1.0], 'Nova-Koi': [172.17, 100.7, 97.45, 100.7, 0, 0.0, 0.3, 0.3], 'P250-Supernova': [173.35, 108.02, 74.71, 108.02, 0, 0.0, 0.4, 0.4], 'PP-Bizon-Osiris': [171.08, 110.25, 84.46, 110.25, 0, 0.0, 0.5, 0.5]}}, 'Operation Broken Fang Case': {'Classified': {'Five-SeveN-Fairy-Tale': [8626.19, 4006.64, 2631.38, 4006.64, 0, 0.02, 0.9, 0.88], 'M4A4-Cyber-Security': [5739.24, 3476.03, 2684.4, 3476.03, 0, 0.0, 0.98, 0.98], 'USP-S-Monster-Mashup': [5118.11, 3673.12, 2653.05, 3673.12, 0, 0.0, 0.7, 0.7]}, 'Mil-Spec': {'CZ75-Auto-Vendetta': [149.21, 90.96, 105.49, 90.96, 0, 0.0, 1.0, 1.0], 'G3SG1-Digital-Mesh': [104.38, 111.81, 78.27, 111.81, 0, 0.0, 0.8, 0.8], 'Galil-AR-Vandal': [185.78, 87.37, 85.53, 87.37, 0, 0.0, 1.0, 1.0], 'M249-Deep-Relief': [121.24, 75.8, 85.53, 75.8, 0, 0.0, 1.0, 1.0], 'MP5-SD-Condition-Zero': [142.5, 85.53, 89.85, 85.53, 0, 0.0, 1.0, 1.0], 'P250-Contaminant': [113.52, 85.97, 114.8, 85.97, 0, 0.0, 0.7, 0.7], 'P90-Cocoa-Rampage': [128.2, 95.29, 88.21, 95.29, 0, 0.0, 0.6, 0.6]}, 'Restricted': {'AWP-Exoskeleton': [1055.81, 617.23, 476.46, 617.23, 0, 0.0, 1.0, 1.0], 'Dual-Berettas-Dezastre': [847.89, 542.53, 394.3, 542.53, 0, 0.0, 1.0, 1.0], 'Nova-Clear-Polymer': [748.26, 565.26, 406.32, 565.26, 0, 0.0, 1.0, 1.0], 'SSG-08-Parallax': [779.51, 526.28, 400.32, 526.28, 0, 0.0, 1.0, 1.0], 'UMP-45-Gold-Bismuth': [723.81, 543.03, 395.29, 543.03, 0, 0.0, 0.7, 0.7]}}, 'Operation Riptide Case': {'Classified': {'Glock-18-Snack-Attack': [2349.86, 864.65, 468.88, 864.65, 0, 0.0, 1.0, 1.0], 'MAC-10-Toybox': [2243.02, 790.53, 430.86, 790.53, 0, 0.0, 1.0, 1.0], 'SSG-08-Turbo-Peek': [2261.04, 1161.17, 680.84, 1161.17, 0, 0.0, 0.6, 0.6]}, 'Mil-Spec': {'AUG-Plague': [179.76, 142.3, 98.73, 142.3, 0, 0.0, 0.76, 0.76], 'Dual-Berettas-Tread': [197.64, 119.66, 105.08, 119.66, 0, 0.0, 1.0, 1.0], 'G3SG1-Keeping-Tabs': [184.08, 121.48, 100.41, 121.48, 0, 0.0, 0.7, 0.7], 'MP7-Guerrilla': [186.78, 121.55, 110.8, 121.55, 0, 0.0, 1.0, 1.0], 'PP-Bizon-Lumen': [237.15, 131.44, 95.29, 131.44, 0, 0.0, 0.77, 0.77], 'USP-S-Black-Lotus': [876.03, 322.99, 171.17, 322.99, 0, 0.0, 0.9, 0.9], 'XM1014-Watchdog': [569.04, 204.03, 134.39, 204.03, 0, 0.0, 1.0, 1.0]}, 'Restricted': {'FAMAS-ZX-Spectron': [849.33, 381.43, 232.96, 381.43, 0, 0.0, 1.0, 1.0], 'Five-SeveN-Boost-Protocol': [452.37, 329.65, 219.62, 329.65, 0, 0.0, 0.41, 0.41], 'M4A4-Spider-Lily': [2665.26, 1062.34, 498.92, 1062.34, 0, 0.0, 1.0, 1.0], 'MAG-7-BI83-Spectrum': [254.47, 266.85, 83.55, 266.85, 0, 0.0, 0.6, 0.6], 'MP9-Mount-Fuji': [1516.02, 1028.72, 597.88, 1028.72, 0, 0.0, 0.55, 0.55]}}, 'Operation Vanguard Weapon Case': {'Classified': {'P250-Cartel': [1796.92, 790.58, 515.85, 790.58, 0, 0.0, 0.75, 0.75], 'SCAR-20-Cardiac': [1551.01, 639.98, 429.88, 639.98, 0, 0.0, 1.0, 1.0], 'XM1014-Tranquility': [2077.61, 993.17, 786.63, 993.17, 0, 0.0, 0.5, 0.5]}, 'Mil-Spec': {'Five-SeveN-Urban-Hazard': [207.52, 161.66, 157.17, 161.66, 0, 0.0, 0.25, 0.25], 'G3SG1-Murky': [79.04, 69.3, 61.26, 69.3, 0, 0.0, 0.25, 0.25], 'MAG-7-Firestarter': [410.4, 72.74, 55.13, 72.74, 0, 0.06, 0.49, 0.43], 'MP9-Dart': [95.85, 72.98, 57.32, 72.98, 0, 0.0, 0.46, 0.46], 'UMP-45-Delusion': [225.25, 66.66, 59.28, 66.66, 0, 0.06, 0.35, 0.29]}, 'Restricted': {'Glock-18-Grinder': [206.55, 165.3, 197.64, 206.55, 0, 0.02, 0.25, 0.23], 'M4A1-S-Basilisk': [1375.6, 877.54, 688.76, 877.54, 0, 0.0, 0.68, 0.68], 'M4A4-Griffin': [678.21, 329.44, 260.03, 329.44, 0, 0.0, 0.8, 0.8], 'Sawed-Off-Highwayman': [252.54, 144.26, 97.83, 144.26, 0, 0.0, 1.0, 1.0]}}, 'Prisma 2 Case': {'Classified': {'AK-47-Phantom-Disruptor': [1289.64, 776.52, 487.29, 776.52, 0, 0.0, 0.65, 0.65], 'MAC-10-Disco-Tech': [1405.25, 565.26, 293.39, 565.26, 0, 0.0, 1.0, 1.0], 'MAG-7-Justice': [1267.9, 641.4, 255.09, 641.4, 0, 0.0, 1.0, 1.0]}, 'Mil-Spec': {'AUG-Tom-Cat': [33.6, 14.39, 9.98, 14.39, 0, 0.0, 0.8, 0.8], 'AWP-Capillary': [342.73, 75.1, 38.54, 75.1, 0, 0.05, 0.7, 0.65], 'CZ75-Auto-Distressed': [38.98, 12.84, 9.89, 12.84, 0, 0.0, 1.0, 1.0], 'Desert-Eagle-Blue-Ply': [174.87, 49.4, 22.95, 49.4, 0, 0.0, 1.0, 1.0], 'MP5-SD-Desert-Strike': [44.19, 12.99, 7.56, 12.99, 0, 0.0, 1.0, 1.0], 'Negev-Prototype': [33.58, 12.37, 11.08, 12.37, 0, 0.0, 0.7, 0.7], 'R8-Revolver-Bone-Forged': [33.58, 20.58, 9.74, 20.58, 0, 0.0, 0.6, 0.6]}, 'Restricted': {'P2000-Acid-Etched': [226.33, 95.85, 50.4, 95.85, 0, 0.0, 1.0, 1.0], 'Sawed-Off-Apocalypto': [192.21, 97.45, 46.57, 97.45, 0, 0.0, 1.0, 1.0], 'SCAR-20-Enforcer': [162.43, 90.91, 43.85, 90.91, 0, 0.0, 1.0, 1.0], 'SG-553-Darkwing': [244.62, 86.97, 44.4, 86.97, 0, 0.0, 1.0, 1.0], 'SSG-08-Fever-Dream': [276.13, 137.36, 67.18, 137.36, 0, 0.0, 0.72, 0.72]}}, 'Prisma Case': {'Classified': {'AUG-Momentum': [1624.31, 589.95, 216.57, 589.95, 0, 0.05, 1.0, 0.95], 'R8-Revolver-Skull-Crusher': [0, 0, 198.61, 0, 0, 0.25, 0.8, 0.55], 'XM1014-Incinegator': [0, 1270.21, 216.33, 1270.21, 0, 0.14, 0.65, 0.51]}, 'Mil-Spec': {'AK-47-Uncharted': [159.54, 79.71, 42.35, 79.71, 0, 0.0, 0.75, 0.75], 'FAMAS-Crypsis': [57.32, 34.65, 22.92, 34.65, 0, 0.0, 0.55, 0.55], 'Galil-AR-Akoben': [63.25, 39.5, 20.58, 39.5, 0, 0.0, 0.75, 0.75], 'MAC-10-Whitefish': [86.97, 38.54, 21.74, 38.54, 0, 0.0, 1.0, 1.0], 'MP7-Mischief': [0, 78.75, 19.75, 78.75, 0, 0.1, 1.0, 0.9], 'P250-Verdigris': [58.21, 34.65, 19.48, 34.65, 0, 0.0, 0.7, 0.7], 'P90-Off-World': [65.84, 34.65, 19.75, 34.65, 0, 0.0, 0.75, 0.75]}, 'Restricted': {'AWP-Atheris': [1590.06, 792.65, 436.8, 792.65, 0, 0.0, 1.0, 1.0], 'Desert-Eagle-Light-Rail': [417.48, 172.5, 62.25, 172.5, 0, 0.0, 0.9, 0.9], 'MP5-SD-Gauss': [162.43, 98.53, 40.52, 98.53, 0, 0.0, 1.0, 1.0], 'Tec-9-Bamboozle': [199.61, 107.52, 52.37, 107.52, 0, 0.0, 0.8, 0.8], 'UMP-45-Moonrise': [173.26, 88.45, 41.51, 88.45, 0, 0.0, 0.4, 0.4]}}, 'Recoil Case': {'Classified': {'AK-47-Ice-Coaled': [1586.39, 941.01, 518.7, 941.01, 0, 0.0, 0.77, 0.77], 'P250-Visions': [1131.1, 611.83, 325.6, 611.83, 0, 0.0, 0.7, 0.7], 'Sawed-Off-Kiss%E2%99%A5Love': [1166.17, 617.64, 324.85, 617.64, 0, 0.0, 1.0, 1.0]}, 'Mil-Spec': {'FAMAS-Meow-36': [32.32, 12.47, 6.36, 12.47, 0, 0.0, 1.0, 1.0], 'Galil-AR-Destroyer': [36.57, 13.22, 6.24, 13.22, 0, 0.0, 0.7, 0.7], 'Glock-18-Winterized': [36.01, 11.9, 7.56, 11.9, 0, 0.0, 1.0, 1.0], 'M4A4-Poly-Mag': [41.66, 13.72, 6.92, 13.72, 0, 0.0, 1.0, 1.0], 'MAC-10-Monkeyflage': [32.48, 12.99, 6.24, 12.99, 0, 0.0, 1.0, 1.0], 'Negev-Drop-Me': [36.82, 11.9, 5.86, 11.9, 0, 0.0, 1.0, 1.0], 'UMP-45-Roadblock': [31.62, 11.92, 6.49, 11.92, 0, 0.0, 1.0, 1.0]}, 'Restricted': {'Dual-Berettas-Flora-Carnivora': [243.64, 100.7, 49.71, 100.7, 0, 0.0, 1.0, 1.0], 'M249-Downtown': [167.64, 96.02, 48.48, 96.02, 0, 0.0, 0.65, 0.65], 'P90-Vent-Rush': [169.02, 95.29, 48.72, 95.29, 0, 0.0, 0.7, 0.7], 'R8-Revolver-Crazy-8': [227.4, 95.85, 48.72, 95.85, 0, 0.0, 1.0, 1.0], 'SG-553-Dragon-Tech': [172.42, 95.82, 48.81, 95.82, 0, 0.0, 0.7, 0.7]}}, 'Revolution Case': {'Classified': {'AWP-Duality': [1285.79, 597.14, 251.99, 597.14, 0, 0.0, 0.8, 0.8], 'P2000-Wicked-Sick': [1347.7, 528.7, 239.16, 528.7, 0, 0.0, 1.0, 1.0], 'UMP-45-Wild-Child': [1263.94, 533.64, 229.6, 533.64, 0, 0.0, 1.0, 1.0]}, 'Mil-Spec': {'MAG-7-Insomnia': [35.57, 12.85, 6.49, 12.85, 0, 0.0, 1.0, 1.0], 'MP5-SD-Liquidation': [39.99, 12.84, 6.33, 12.84, 0, 0.0, 1.0, 1.0], 'MP9-Featherweight': [33.58, 12.37, 6.36, 12.37, 0, 0.0, 1.0, 1.0], 'P250-Re.built': [38.98, 11.86, 6.49, 11.86, 0, 0.0, 0.9, 0.9], 'SCAR-20-Fragments': [31.79, 12.49, 5.92, 12.49, 0, 0.0, 0.78, 0.78], 'SG-553-Cyberforce': [34.93, 12.9, 6.1, 12.9, 0, 0.0, 0.9, 0.9], 'Tec-9-Rebel': [32.48, 12.84, 5.92, 12.84, 0, 0.0, 1.0, 1.0]}, 'Restricted': {'Glock-18-Umbral-Rabbit': [182.81, 97.57, 44.19, 97.57, 0, 0.0, 0.75, 0.75], 'M4A1-S-Emphorosaur-S': [284.6, 108.28, 47.43, 108.28, 0, 0.0, 0.8, 0.8], 'MAC-10-Sakkaku': [0, 0, 82.29, 0, 0, 0.21, 0.79, 0.58], 'P90-Neoqueen': [157.25, 87.05, 43.08, 87.05, 0, 0.0, 0.6, 0.6], 'R8-Revolver-Banana-Cannon': [206.82, 90.86, 41.51, 90.86, 0, 0.0, 1.0, 1.0]}}, 'Revolver Case': {'Classified': {'AK-47-Point-Disarray': [3863.69, 2063.42, 1311.38, 2063.42, 0, 0.0, 0.67, 0.67], 'G3SG1-The-Executioner': [0, 1447.53, 204.65, 1447.53, 0, 0.14, 0.85, 0.71], 'P90-Shapewood': [1177.97, 435.59, 190.73, 435.59, 0, 0.0, 1.0, 1.0]}, 'Mil-Spec': {'AUG-Ricochet': [62.72, 32.08, 16.33, 32.08, 0, 0.0, 0.8, 0.8], 'Desert-Eagle-Corinthian': [69.17, 40.18, 29.63, 40.18, 0, 0.0, 0.44, 0.44], 'P2000-Imperial': [45.55, 32.6, 23.82, 32.6, 0, 0.0, 0.2, 0.2], 'R8-Revolver-Crimson-Web': [440.75, 45.47, 18.24, 45.47, 0, 0.06, 0.8, 0.74], 'Sawed-Off-Yorick': [68.34, 26.98, 11.97, 26.98, 0, 0.0, 1.0, 1.0], 'SCAR-20-Outbreak': [59.76, 40.9, 14.95, 40.9, 0, 0.0, 0.5, 0.5]}, 'Restricted': {'Five-SeveN-Retrobution': [347.19, 199.25, 101.26, 199.25, 0, 0.0, 1.0, 1.0], 'Negev-Power-Loader': [617.38, 310.31, 138.6, 310.31, 0, 0.0, 1.0, 1.0], 'PP-Bizon-Fuel-Rod': [315.71, 144.9, 80.13, 144.9, 0, 0.0, 1.0, 1.0], 'SG-553-Tiger-Moth': [325.95, 148.25, 79.43, 148.25, 0, 0.0, 1.0, 1.0], 'Tec-9-Avalanche': [589.66, 329.55, 192.08, 329.55, 0, 0.0, 1.0, 1.0], 'XM1014-Teclu-Burner': [269.79, 160.26, 89.01, 160.26, 0, 0.0, 0.65, 0.65]}}, 'Safehouse Collection': {'Industrial': {'AUG-Condemned': [34.43, 12.99, 34.43, 12.99, 0, 0.06, 0.8, 0.74], 'G3SG1-VariCamo': [24.95, 10.87, 7.41, 10.87, 0, 0.0, 0.6, 0.6], 'Galil-AR-VariCamo': [22.73, 10.87, 7.56, 10.87, 0, 0.0, 0.6, 0.6], 'M249-Gator-Mesh': [22.95, 10.89, 7.52, 10.89, 0, 0.0, 0.6, 0.6], 'MP9-Orange-Peel': [49.93, 11.05, 7.41, 11.05, 0, 0.06, 0.8, 0.74], 'USP-S-Forest-Leaves': [104.05, 12.04, 7.49, 12.04, 0, 0.06, 0.8, 0.74]}, 'Mil-Spec': {'FAMAS-Teardown': [116.88, 67.2, 39.52, 67.2, 0, 0.0, 0.6, 0.6], 'Five-SeveN-Silver-Quartz': [129.38, 63.09, 40.07, 63.09, 0, 0.0, 0.4, 0.4], 'SSG-08-Acid-Fade': [135.38, 0, 135.38, 135.38, 0, 0.0, 0.03, 0.03]}, 'Restricted': {'M4A1-S-Nitro': [414.06, 138.15, 42.68, 138.15, 0, 0.06, 0.8, 0.74]}}, 'Shadow Case': {'Classified': {'AK-47-Frontside-Misty': [7862.03, 3097.11, 1746.2, 3097.11, 0, 0.02, 0.87, 0.85], 'G3SG1-Flux': [2321.35, 1419.4, 859.76, 1419.4, 0, 0.0, 0.9, 0.9], 'SSG-08-Big-Iron': [2207.97, 1431.78, 1017.9, 1431.78, 0, 0.0, 0.64, 0.64]}, 'Mil-Spec': {'Dual-Berettas-Dualing-Dragons': [165.77, 44.87, 30.76, 44.87, 0, 0.0, 1.0, 1.0], 'FAMAS-Survivor-Z': [93.86, 56.04, 29.63, 56.04, 0, 0.0, 0.6, 0.6], 'Glock-18-Wraiths': [161.73, 51.31, 28.15, 51.31, 0, 0.0, 0.8, 0.8], 'MAC-10-Rangeen': [58.62, 38.98, 23.82, 38.98, 0, 0.0, 0.5, 0.5], 'MAG-7-Cobalt-Core': [61.26, 44.4, 23.71, 44.4, 0, 0.0, 0.5, 0.5], 'SCAR-20-Green-Marine': [61.72, 43.02, 22.45, 43.02, 0, 0.0, 0.8, 0.8], 'XM1014-Scumbria': [111.36, 79.04, 26.92, 79.04, 0, 0.0, 1.0, 1.0]}, 'Restricted': {'Galil-AR-Stone-Cold': [771.01, 392.44, 188.75, 392.44, 0, 0.0, 0.9, 0.9], 'M249-Nebula-Crusader': [465.45, 288.16, 156.13, 288.16, 0, 0.0, 1.0, 1.0], 'MP7-Special-Delivery': [404.49, 296.47, 151.19, 296.47, 0, 0.0, 0.62, 0.62], 'P250-Wingshot': [505.08, 279.81, 161.4, 279.81, 0, 0.0, 0.9, 0.9]}}, 'Shattered Web Case': {'Classified': {'SG-553-Colony-IV': [3875.61, 1712.02, 895.53, 1712.02, 0, 0.0, 1.0, 1.0], 'SSG-08-Bloodshot': [0, 8231.78, 1177.85, 8231.78, 0, 0.14, 0.6, 0.46], 'Tec-9-Decimator': [6121.49, 3149.75, 1508.18, 3149.75, 0, 0.0, 0.75, 0.75]}, 'Mil-Spec': {'Dual-Berettas-Balance': [474.34, 150.51, 137.36, 150.51, 0, 0.0, 1.0, 1.0], 'G3SG1-Black-Sand': [123.23, 113.81, 147.25, 113.81, 0, 0.0, 0.8, 0.8], 'M249-Warbird': [151.19, 108.06, 107.71, 108.06, 0, 0.05, 0.65, 0.6], 'MP5-SD-Acid-Wash': [148.53, 117.88, 119.1, 117.88, 0, 0.0, 0.68, 0.68], 'Nova-Plume': [135.36, 499.14, 120.07, 499.14, 0, 0.0, 0.8, 0.8], 'R8-Revolver-Memento': [183.71, 113.89, 113.65, 113.89, 0, 0.0, 0.8, 0.8], 'SCAR-20-Torn': [164.88, 99.14, 124.79, 99.14, 0, 0.0, 0.45, 0.45]}, 'Restricted': {'AK-47-Rat-Rod': [2382.31, 628.93, 406.08, 628.93, 0, 0.0, 1.0, 1.0], 'AUG-Arctic-Wolf': [524.01, 348.69, 163.5, 348.69, 0, 0.0, 0.7, 0.7], 'MP7-Neon-Ply': [592.96, 321.56, 164.04, 321.56, 0, 0.0, 1.0, 1.0], 'P2000-Obsidian': [995.91, 323.55, 163.04, 323.55, 0, 0.0, 1.0, 1.0], 'PP-Bizon-Embargo': [601.33, 308.82, 165.67, 308.82, 0, 0.0, 1.0, 1.0]}}, 'Snakebite Case': {'Classified': {'Galil-AR-Chromatic-Aberration': [1180.95, 515.58, 246.06, 515.58, 0, 0.0, 1.0, 1.0], 'MP9-Food-Chain': [1167.21, 484.93, 264.21, 484.93, 0, 0.0, 1.0, 1.0], 'XM1014-XOXO': [939.32, 413.66, 194.92, 413.66, 0, 0.0, 0.9, 0.9]}, 'Mil-Spec': {'CZ75-Auto-Circaetus': [79.05, 30.37, 20.75, 30.37, 0, 0.0, 0.9, 0.9], 'Glock-18-Clear-Polymer': [154.73, 42.49, 25.99, 42.49, 0, 0.0, 1.0, 1.0], 'M249-OSIPR': [59.54, 31.4, 25.94, 31.4, 0, 0.0, 0.7, 0.7], 'Nova-Windblown': [54.35, 29.63, 20.58, 29.63, 0, 0.0, 0.5, 0.5], 'R8-Revolver-Junk-Yard': [64.97, 28.94, 19.75, 28.94, 0, 0.0, 1.0, 1.0], 'SG-553-Heavy-Metal': [64.97, 30.31, 20.41, 30.31, 0, 0.0, 1.0, 1.0], 'UMP-45-Oscillator': [49.4, 29.63, 20.19, 29.63, 0, 0.0, 0.5, 0.5]}, 'Restricted': {'AK-47-Slate': [1563.67, 645.31, 430.01, 645.31, 0, 0.0, 1.0, 1.0], 'Desert-Eagle-Trigger-Discipline': [330.29, 152.98, 74.71, 152.98, 0, 0.0, 0.97, 0.97], 'MAC-10-Button-Masher': [171.08, 87.82, 43.67, 87.82, 0, 0.0, 1.0, 1.0], 'Negev-dev-texture': [193.28, 93.12, 43.03, 93.12, 0, 0.0, 0.65, 0.65], 'P250-Cyber-Shell': [164.59, 86.03, 38.98, 86.03, 0, 0.0, 0.85, 0.85]}}, 'Spectrum 2 Case': {'Classified': {'M4A1-S-Leaded-Glass': [1451.61, 730.6, 515.85, 730.6, 0, 0.0, 0.7, 0.7], 'PP-Bizon-High-Roller': [1404.49, 685.98, 318.21, 685.98, 0, 0.0, 1.0, 1.0], 'R8-Revolver-Llama-Cannon': [1520.89, 565.26, 296.44, 565.26, 0, 0.03, 0.7, 0.67]}, 'Mil-Spec': {'AUG-Triqua': [52.37, 18.98, 12.99, 18.98, 0, 0.0, 1.0, 1.0], 'G3SG1-Hunter': [38.98, 15.92, 11.86, 15.92, 0, 0.0, 1.0, 1.0], 'Glock-18-Off-World': [104.82, 29.05, 16.24, 29.05, 0, 0.0, 1.0, 1.0], 'MAC-10-Oceanic': [32.47, 18.19, 15.8, 18.19, 0, 0.0, 0.6, 0.6], 'Sawed-Off-Morris': [32.2, 17.78, 11.9, 17.78, 0, 0.0, 1.0, 1.0], 'SCAR-20-Jungle-Slipstream': [32.66, 19.51, 12.81, 19.51, 0, 0.0, 0.5, 0.5], 'Tec-9-Cracked-Opal': [64.97, 16.05, 19.48, 16.05, 0, 0.0, 1.0, 1.0]}, 'Restricted': {'CZ75-Auto-Tacticat': [200.84, 96.06, 57.47, 96.06, 0, 0.0, 0.7, 0.7], 'MP9-Goo': [187.76, 113.65, 66.43, 113.65, 0, 0.0, 0.6, 0.6], 'SG-553-Phantom': [162.43, 88.14, 52.11, 88.14, 0, 0.0, 0.6, 0.6], 'UMP-45-Exposure': [213.9, 86.97, 51.03, 86.97, 0, 0.0, 0.55, 0.55], 'XM1014-Ziggy': [171.08, 90.91, 48.91, 90.91, 0, 0.0, 0.72, 0.72]}}, 'Spectrum Case': {'Classified': {'AWP-Fever-Dream': [1883.12, 1482.27, 1375.6, 1482.27, 0, 0.0, 0.55, 0.55], 'CZ75-Auto-Xiangliu': [1789.42, 1530.77, 1332.55, 1530.77, 0, 0.0, 0.56, 0.56], 'M4A1-S-Decimator': [3984.89, 2087.99, 1375.6, 2087.99, 0, 0.0, 0.85, 0.85]}, 'Mil-Spec': {'Desert-Eagle-Oxide-Blaze': [65.22, 44.18, 30.37, 44.18, 0, 0.0, 0.5, 0.5], 'Five-SeveN-Capillary': [50.89, 34.92, 29.24, 34.92, 0, 0.0, 0.7, 0.7], 'MP7-Akoben': [48.48, 32.48, 29.28, 32.48, 0, 0.0, 0.7, 0.7], 'P250-Ripple': [42.14, 34.93, 33.6, 34.93, 0, 0.0, 0.5, 0.5], 'PP-Bizon-Jungle-Slipstream': [53.73, 40.52, 28.15, 40.52, 0, 0.0, 0.5, 0.5], 'Sawed-Off-Zander': [151.07, 35.84, 26.13, 35.84, 0, 0.05, 1.0, 0.95], 'SCAR-20-Blueprint': [47.65, 32.54, 47.65, 32.54, 0, 0.0, 0.75, 0.75]}, 'Restricted': {'Galil-AR-Crimson-Tsunami': [439.15, 279.68, 179.05, 279.68, 0, 0.0, 0.55, 0.55], 'M249-Emerald-Poison-Dart': [296.47, 189.67, 155.94, 189.67, 0, 0.0, 0.45, 0.45], 'MAC-10-Last-Dive': [297.78, 198.2, 172.17, 198.2, 0, 0.0, 0.52, 0.52], 'UMP-45-Scaffold': [363.83, 205.66, 167.01, 205.66, 0, 0.0, 1.0, 1.0], 'XM1014-Seasons': [309.48, 211.29, 198.66, 211.29, 0, 0.0, 0.5, 0.5]}}, 'Train Collection': {'Industrial': {'M4A4-Urban-DDPAT': [538.33, 44.93, 21.97, 44.93, 0, 0.06, 0.8, 0.74], 'MAC-10-Candy-Apple': [39.94, 29.87, 22.22, 29.87, 0, 0.0, 0.3, 0.3], 'MAG-7-Metallic-DDPAT': [38.66, 31.32, 38.66, 31.32, 0, 0.0, 0.08, 0.08], 'P250-Metallic-DDPAT': [43.87, 31.4, 43.87, 31.4, 0, 0.0, 0.08, 0.08], 'P90-Ash-Wood': [41.93, 26.85, 24.1, 26.85, 0, 0.0, 0.45, 0.45], 'SCAR-20-Carbon-Fiber': [38.79, 33.6, 38.79, 33.6, 0, 0.0, 0.12, 0.12]}, 'Mil-Spec': {'Desert-Eagle-Urban-Rubble': [164.04, 71.61, 41.51, 71.61, 0, 0.0, 0.5, 0.5], 'Sawed-Off-Amber-Fade': [158.74, 68.88, 43.31, 68.88, 0, 0.0, 0.4, 0.4]}, 'Restricted': {'Tec-9-Red-Quartz': [15.8, 13.72, 11.86, 13.72, 0, 0.0, 0.4, 0.4]}}}
SKIN_DATABASE = combined_data

def find_skin_info(skin_name):
    """Finds collection and rarity for a given skin name."""
    base_name = skin_name.split(' (')[0].replace(' | ', '-').replace(' ', '-')
    
    for collection, rarities in SKIN_DATABASE.items():
        for rarity, skins in rarities.items():
            for db_skin in skins.keys():
                if base_name.lower() == db_skin.lower():
                    return collection, rarity
    
    return "Unknown Collection", "Unknown Rarity"

def convert_txt_to_csv(input_file, output_file):
    """Converts the text file to CSV format with additional info."""
    header = ['Collection', 'Rarity', 'Skin Name', 'Float', 'Price', 'Used', 'Usage']
    
    # Read existing data
    existing_data = []
    if os.path.exists(output_file):
        with open(output_file, 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            try:
                file_header = next(reader)
                if file_header != header:
                    print("Header mismatch - will overwrite with correct header")
            except StopIteration:
                pass  # Empty file
            existing_data = list(reader)
    
    # Read new entries
    new_entries = []
    seen = set((row[2], row[3], row[4]) for row in existing_data)  # (Skin, Float, Price)
    
    with open(input_file, 'r', encoding='utf-8') as f:
        for line in reversed(f.readlines()):  # Process newest first
            parts = line.strip().split('\t')
            if len(parts) >= 6:
                skin_name = parts[1]
                float_val = parts[2]
                price = parts[3]
                used = parts[0]
                
                key = (skin_name, float_val, price)
                if key not in seen:
                    collection, rarity = find_skin_info(skin_name)
                    new_entries.append([
                        collection,
                        rarity,
                        skin_name,
                        float_val,
                        price,
                        used,
                        'unused'
                    ])
                    seen.add(key)
    
    # Write all data (new entries first)
    with open(output_file, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(header)
        writer.writerows(new_entries)
        writer.writerows(existing_data)
    
    print(f"Processed {len(new_entries)} new entries")
    return output_file

class SkinTradeUpApp:
    def __init__(self, master, csv_file_path):
        self.master = master
        master.title("CS:GO Trade-Up Helper")
        master.geometry("850x750")
        
        self.csv_file_path = csv_file_path
        self.all_available_skins_data = []
        self.found_combination_details = None
        
        # Create UI elements
        self.create_widgets()
        
        # Load data
        self.load_csv_data()

    def create_widgets(self):
        """Create all the UI widgets."""
        input_frame = ttk.LabelFrame(self.master, text="Trade-Up Criteria")
        input_frame.pack(padx=10, pady=10, fill="x")

        ttk.Label(input_frame, text="Collection (for Combo):").grid(row=0, column=0, padx=5, pady=5, sticky="w")
        self.collection_combobox = ttk.Combobox(input_frame, width=30, state="readonly")
        self.collection_combobox.grid(row=0, column=1, padx=5, pady=5, sticky="ew")
        self.collection_combobox.bind("<<ComboboxSelected>>", self.on_filter_dropdown_changed)

        ttk.Label(input_frame, text="Rarity (for Combo):").grid(row=1, column=0, padx=5, pady=5, sticky="w")
        self.rarity_combobox = ttk.Combobox(input_frame, width=30, state="readonly")
        self.rarity_combobox.grid(row=1, column=1, padx=5, pady=5, sticky="ew")
        self.rarity_combobox.bind("<<ComboboxSelected>>", self.on_filter_dropdown_changed)

        ttk.Label(input_frame, text="Number of Skins (N):").grid(row=2, column=0, padx=5, pady=5, sticky="w")
        self.num_skins_entry = ttk.Entry(input_frame, width=10)
        self.num_skins_entry.grid(row=2, column=1, padx=5, pady=5, sticky="w")
        self.num_skins_entry.insert(0, "3")

        ttk.Label(input_frame, text="Target Max Avg. Float:").grid(row=3, column=0, padx=5, pady=5, sticky="w")
        self.target_max_float_entry = ttk.Entry(input_frame, width=10)
        self.target_max_float_entry.grid(row=3, column=1, padx=5, pady=5, sticky="w")
        self.target_max_float_entry.insert(0, "0.20")

        ttk.Label(input_frame, text="Float Range Tolerance (-):").grid(row=4, column=0, padx=5, pady=5, sticky="w")
        self.float_tolerance_entry = ttk.Entry(input_frame, width=10)
        self.float_tolerance_entry.grid(row=4, column=1, padx=5, pady=5, sticky="w")
        self.float_tolerance_entry.insert(0, "0.005")

        input_frame.columnconfigure(1, weight=1)

        action_frame = ttk.Frame(self.master)
        action_frame.pack(pady=5)
        self.find_button = ttk.Button(action_frame, text="Find Suitable Combination", command=self.find_skins_in_range)
        self.find_button.pack(side=tk.LEFT, padx=5)
        self.use_button = ttk.Button(action_frame, text="Mark Combination as Used", command=self.mark_skins_as_used, state=tk.DISABLED)
        self.use_button.pack(side=tk.LEFT, padx=5)
        self.reload_button = ttk.Button(action_frame, text="Reload CSV Data", command=self.load_csv_data)
        self.reload_button.pack(side=tk.LEFT, padx=5)

        results_frame = ttk.LabelFrame(self.master, text="All Available Skins (Highlight indicates combo)")
        results_frame.pack(padx=10, pady=10, fill="both", expand=True)
        self.skins_tree = ttk.Treeview(results_frame, columns=("Collection", "Rarity", "Skin Name", "Float", "Price", "Used"), show="headings")
        self.skins_tree.heading("Collection", text="Collection")
        self.skins_tree.heading("Rarity", text="Rarity")
        self.skins_tree.heading("Skin Name", text="Skin Name")
        self.skins_tree.heading("Float", text="Float")
        self.skins_tree.heading("Price", text="Price")
        self.skins_tree.heading("Used", text="Used")
        self.skins_tree.column("Collection", width=150)
        self.skins_tree.column("Rarity", width=100)
        self.skins_tree.column("Skin Name", width=200)
        self.skins_tree.column("Float", width=80, anchor="e")
        self.skins_tree.column("Price", width=70, anchor="e")
        self.skins_tree.column("Used", width=70, anchor="center")

        scrollbar = ttk.Scrollbar(results_frame, orient="vertical", command=self.skins_tree.yview)
        self.skins_tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side="right", fill="y")
        self.skins_tree.pack(padx=5, pady=5, fill="both", expand=True)
        self.skins_tree.tag_configure('highlighted', background='lightgreen', foreground='black')
        self.skins_tree.tag_configure('normal', background='white', foreground='black')
        self.skins_tree.tag_configure('dimmed', foreground='grey')

        self.info_label = ttk.Label(self.master, text="Load data to begin.")
        self.info_label.pack(pady=5)
        self.status_label = ttk.Label(self.master, text="Ready.", relief=tk.SUNKEN, anchor=tk.W)
        self.status_label.pack(side=tk.BOTTOM, fill=tk.X)

    def update_status(self, message):
        self.status_label.config(text=message)
        self.master.update_idletasks()

    def load_csv_data(self):
        self.update_status(f"Loading data from {os.path.basename(self.csv_file_path)}...")
        self.all_available_skins_data = []
        self.collection_combobox.set('')
        self.rarity_combobox.set('')
        self.collection_combobox['values'] = []
        self.rarity_combobox['values'] = []
        self.use_button.config(state=tk.DISABLED)
        self.found_combination_details = None
        self.info_label.config(text="Loading...")

        if not os.path.exists(self.csv_file_path):
            messagebox.showerror("File Error", f"CSV file not found: {self.csv_file_path}")
            self.update_status("Error: CSV file not found.")
            self.info_label.config(text="Error: CSV file not found.")
            return

        temp_skins = []
        try:
            with open(self.csv_file_path, 'r', newline='', encoding='utf-8') as csvfile:
                reader = csv.DictReader(csvfile)
                expected_header = ['Collection', 'Rarity', 'Skin Name', 'Float', 'Price', 'Used', 'Usage']
                if not all(col in reader.fieldnames for col in expected_header):
                    missing = [col for col in expected_header if col not in reader.fieldnames]
                    messagebox.showerror("CSV Error", f"CSV file is missing required columns: {', '.join(missing)}")
                    self.update_status("Error: CSV missing columns.")
                    self.info_label.config(text="Error: CSV missing columns.")
                    return
                
                for i, row in enumerate(reader):
                    try:
                        exists_flag_str = row.get('Used', '').strip().lower()
                        usage_status_str = row.get('Usage', '').strip().lower()
                        if exists_flag_str == 'true' and usage_status_str == 'unused':
                            skin = {
                                'Collection': row['Collection'].strip(),
                                'Rarity': row['Rarity'].strip(),
                                'Skin Name': row['Skin Name'].strip(),
                                'Float': float(row['Float']),
                                'Price': float(row['Price'].replace('$', '').replace(',', '')),
                                'original_used_column_value': row['Used'].strip(),
                                'original_row_index_1_based': i + 2
                            }
                            temp_skins.append(skin)
                    except ValueError as ve:
                        print(f"Skipping row {i+2} due to ValueError: {ve}")
                    except KeyError as ke:
                        print(f"Skipping row {i+2} due to KeyError: {ke}")
            
            self.all_available_skins_data = temp_skins
            self.populate_collection_dropdown()
            self.update_status(f"Loaded {len(self.all_available_skins_data)} available skins.")
            if not self.all_available_skins_data:
                self.info_label.config(text="No available skins found.")
            else:
                self.info_label.config(text=f"{len(self.all_available_skins_data)} available skins. Select criteria.")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to load or parse CSV file: {e}")
            self.update_status(f"Error loading CSV: {e}")
            self.info_label.config(text="Error loading CSV.")

    def populate_collection_dropdown(self):
        if not self.all_available_skins_data:
            return
        
        collections = sorted(list(set(s['Collection'] for s in self.all_available_skins_data)))
        self.collection_combobox['values'] = collections
        
        if collections:
            self.collection_combobox.current(0)
            self.on_filter_dropdown_changed(None)
        else:
            self.on_filter_dropdown_changed(None)

    def on_filter_dropdown_changed(self, event=None):
        selected_collection = self.collection_combobox.get()
        
        if selected_collection and self.all_available_skins_data:
            rarities = sorted(list(set(
                s['Rarity'] for s in self.all_available_skins_data 
                if s['Collection'] == selected_collection
            )))
            self.rarity_combobox['values'] = rarities
            
            if rarities:
                self.rarity_combobox.current(0)
            else:
                self.rarity_combobox.set('')
        else:
            self.rarity_combobox['values'] = []
            self.rarity_combobox.set('')
        
        self.display_skins_in_treeview()

    def display_skins_in_treeview(self, combination_to_highlight=None):
        self.skins_tree.delete(*self.skins_tree.get_children())
        combo_search_collection = self.collection_combobox.get()
        combo_search_rarity = self.rarity_combobox.get()
        
        if not self.all_available_skins_data:
            self.info_label.config(text="No available skins loaded.")
            return
        
        self.info_label.config(text=f"Displaying {len(self.all_available_skins_data)} skins. Filter: '{combo_search_collection} / {combo_search_rarity}'.")
        
        highlight_row_indices = set()
        if combination_to_highlight:
            highlight_row_indices = set(s['original_row_index_1_based'] for s in combination_to_highlight)
        
        for skin_dict in self.all_available_skins_data:
            tags_to_apply = ('normal',)
            matches_search_criteria = (
                skin_dict['Collection'] == combo_search_collection and 
                skin_dict['Rarity'] == combo_search_rarity
            )
            
            if skin_dict['original_row_index_1_based'] in highlight_row_indices:
                tags_to_apply = ('highlighted',)
            elif not matches_search_criteria and combo_search_collection and combo_search_rarity:
                tags_to_apply = ('dimmed',)
            
            tree_iid = skin_dict['original_row_index_1_based']
            self.skins_tree.insert("", "end", iid=tree_iid, values=(
                skin_dict['Collection'],
                skin_dict['Rarity'],
                skin_dict['Skin Name'],
                f"{skin_dict['Float']:.6f}",
                f"${skin_dict['Price']:.2f}",
                skin_dict['original_used_column_value']
            ), tags=tags_to_apply)

    def find_skins_in_range(self):
        self.found_combination_details = None
        self.use_button.config(state=tk.DISABLED)
        self.display_skins_in_treeview()

        combo_search_collection = self.collection_combobox.get()
        combo_search_rarity = self.rarity_combobox.get()

        if not combo_search_collection or not combo_search_rarity:
            messagebox.showinfo("Criteria Missing", "Please select Collection and Rarity for combinations.")
            return

        try:
            num_skins_n = int(self.num_skins_entry.get())
            cutoff_float = float(self.target_max_float_entry.get())
            float_tolerance = float(self.float_tolerance_entry.get())
            
            if num_skins_n <= 0:
                messagebox.showerror("Input Error", "N must be > 0.")
                return
            if float_tolerance < 0:
                messagebox.showerror("Input Error", "Tolerance cannot be negative.")
                return
        except ValueError:
            messagebox.showerror("Input Error", "Invalid numeric input.")
            return

        lower_bound_avg_float = cutoff_float - float_tolerance
        upper_bound_avg_float = cutoff_float

        # Prepare data for NumPy
        candidate_skins_for_combo = [
            skin for skin in self.all_available_skins_data
            if skin['Collection'] == combo_search_collection and skin['Rarity'] == combo_search_rarity
        ]

        if not candidate_skins_for_combo:
            messagebox.showinfo("No Skins for Combo", f"No skins match '{combo_search_collection} / {combo_search_rarity}'.")
            return

        if len(candidate_skins_for_combo) < num_skins_n:
            messagebox.showinfo("Not Enough Skins", f"Need {num_skins_n}, only {len(candidate_skins_for_combo)} for criteria.")
            return

        # Extract floats into a NumPy array
        floats_np_array = np.array([s['Float'] for s in candidate_skins_for_combo], dtype=np.float64)
        
        self.update_status(f"Evaluating combinations for '{combo_search_collection} / {combo_search_rarity}' using NumPy...")
        
        found_combo_skin_dicts = None
        count = 0
        indices_for_combinations = range(len(candidate_skins_for_combo))

        try:
            total_combinations = comb(len(candidate_skins_for_combo), num_skins_n)
            if total_combinations > 10_000_000 and num_skins_n > 4:
                if not messagebox.askyesno("Large Search", f"~{total_combinations:,} combinations. Continue?"):
                    self.update_status("Search cancelled.")
                    return
        except Exception:
            pass

        for index_combo_tuple in combinations(indices_for_combinations, num_skins_n):
            count += 1
            if count % 50000 == 0:
                self.update_status(f"Checked {count:,} combinations (NumPy)...")

            # Use NumPy array with tuple of indices for summation
            current_sum_float = np.sum(floats_np_array[list(index_combo_tuple)])
            current_avg_float = current_sum_float / num_skins_n

            if lower_bound_avg_float < current_avg_float < upper_bound_avg_float:
                # Reconstruct the combination using the original skin dictionaries
                found_combo_skin_dicts = [candidate_skins_for_combo[i] for i in index_combo_tuple]
                self.found_combination_details = {
                    'combo_skins': found_combo_skin_dicts,
                    'avg_float': current_avg_float,
                    'num_checked': count
                }
                break  # Early exit
        
        if self.found_combination_details:
            self.update_status(f"Found (NumPy). {self.found_combination_details['num_checked']:,} checks. Avg: {self.found_combination_details['avg_float']:.6f}")
            self.display_skins_in_treeview(combination_to_highlight=self.found_combination_details['combo_skins'])
            self.use_button.config(state=tk.NORMAL)
            messagebox.showinfo("Combination Found", f"Found combination. Avg Float: {self.found_combination_details['avg_float']:.6f}")
        else:
            self.update_status(f"No suitable combination (NumPy): {count:,} checks.")
            self.display_skins_in_treeview()
            messagebox.showinfo("No Combination", f"No combination in target range (NumPy): {count:,} checks.")

    def mark_skins_as_used(self):
        if not self.found_combination_details or not self.found_combination_details['combo_skins']:
            messagebox.showerror("Error", "No combination found/selected to mark as used.")
            return
        
        skins_to_mark = self.found_combination_details['combo_skins']
        row_indices_to_mark_used = {s['original_row_index_1_based'] for s in skins_to_mark}
        
        confirm_msg = f"Mark {len(skins_to_mark)} skins as 'used' in CSV?\n\nSkins (first 10):\n"
        for i, s in enumerate(skins_to_mark[:10]):
            confirm_msg += f"- L{s['original_row_index_1_based']}: {s['Skin Name']} (F: {s['Float']:.4f})\n"
        if len(skins_to_mark) > 10:
            confirm_msg += f"...and {len(skins_to_mark)-10} more."
        
        if not messagebox.askyesno("Confirm Usage", confirm_msg):
            return
        
        self.update_status("Updating CSV file...")
        all_csv_rows_modified, header, modified_count = [], [], 0
        
        try:
            with open(self.csv_file_path, 'r', newline='', encoding='utf-8') as infile:
                reader = csv.reader(infile)
                header = next(reader)
                all_csv_rows_modified.append(header)
                
                usage_col_idx = -1
                try:
                    usage_col_idx = header.index('Usage')
                except ValueError:
                    messagebox.showerror("CSV Error", "'Usage' column missing.")
                    return
                
                for rn, row_data in enumerate(reader, start=2):
                    if rn in row_indices_to_mark_used:
                        if len(row_data) > usage_col_idx and row_data[usage_col_idx].strip().lower() == 'unused':
                            row_data[usage_col_idx] = 'used'
                            modified_count += 1
                    all_csv_rows_modified.append(row_data)
            
            if modified_count != len(row_indices_to_mark_used):
                messagebox.showwarning("Partial Update", f"Attempted {len(row_indices_to_mark_used)}, updated {modified_count}.")
            elif modified_count == 0:
                messagebox.showinfo("No Change", "No skins updated.")
                self.update_status("No changes.")
                return
            
            with open(self.csv_file_path, 'w', newline='', encoding='utf-8') as outfile:
                csv.writer(outfile).writerows(all_csv_rows_modified)
            
            messagebox.showinfo("Success", f"{modified_count} skins marked 'used'.")
            self.update_status("CSV updated. Reloading...")
            self.load_csv_data()
        except Exception as e:
            messagebox.showerror("File Update Error", f"Could not update CSV: {e}")
            self.update_status(f"Error updating CSV: {e}")

def main():
    # Path configuration
    input_txt_path = r"C:\Users\Pushkar\OneDrive\Documents\Project\autoit_scripts\Skins_buy_scripts\price\history.txt"
    output_csv_path = r"C:\Users\Pushkar\OneDrive\Documents\Project\autoit_scripts\Skins_buy_scripts\price\history.csv"
    
    # Convert text file to CSV if needed
    if os.path.exists(input_txt_path):
        if not os.path.exists(output_csv_path) or os.path.getmtime(input_txt_path) > os.path.getmtime(output_csv_path):
            try:
                convert_txt_to_csv(input_txt_path, output_csv_path)
            except Exception as e:
                messagebox.showerror("Conversion Error", f"Failed to convert text file to CSV: {e}")
                return
    
    # Create and run the application
    root = tk.Tk()
    app = SkinTradeUpApp(root, output_csv_path)
    root.mainloop()

if __name__ == "__main__":
    main()